// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xilly_decprint (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        val_r,
        debug_ready,
        debug_out,
        debug_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] val_r;
input  [7:0] debug_ready;
output  [7:0] debug_out;
output   debug_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg debug_out_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] powers10_address0;
reg    powers10_ce0;
wire   [27:0] powers10_q0;
wire   [31:0] first_2_cast1_fu_137_p1;
reg   [31:0] first_2_cast1_reg_267;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_148_p2;
reg   [3:0] i_reg_277;
wire   [0:0] exitcond_fu_142_p2;
wire   [4:0] tmp_19_fu_154_p1;
reg   [4:0] tmp_19_reg_287;
wire   [31:0] powers10_load_cast_fu_162_p1;
reg   [31:0] powers10_load_cast_reg_292;
wire    ap_CS_fsm_state3;
wire   [7:0] x_1_fu_174_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] first_1_fu_214_p3;
wire   [0:0] tmp_fu_169_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] p_rec_i_fu_235_p2;
reg   [31:0] p_rec_i_reg_316;
wire   [7:0] out_q0;
reg   [7:0] out_load_reg_321;
wire    ap_CS_fsm_state6;
reg   [3:0] out_address0;
reg    out_ce0;
reg    out_we0;
reg   [7:0] out_d0;
reg   [31:0] first_reg_87;
reg   [3:0] first_2_reg_99;
reg   [7:0] x_reg_110;
reg   [31:0] p_0_rec_i_reg_121;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_21_fu_251_p1;
wire   [31:0] sum_i_cast_fu_230_p1;
reg   [31:0] v_fu_34;
wire   [31:0] v_1_fu_180_p2;
wire   [7:0] tmp_5_fu_190_p2;
wire  signed [29:0] powers10_load_cast2_fu_158_p1;
wire   [0:0] tmp_6_fu_197_p2;
wire   [0:0] tmp_7_fu_203_p2;
wire   [0:0] or_cond_fu_208_p2;
wire   [4:0] tmp_20_fu_221_p1;
wire   [4:0] sum_i_fu_225_p2;
wire   [0:0] tmp_i_fu_241_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

xilly_decprint_pobkb #(
    .DataWidth( 28 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
powers10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(powers10_address0),
    .ce0(powers10_ce0),
    .q0(powers10_q0)
);

xilly_decprint_out #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_address0),
    .ce0(out_ce0),
    .we0(out_we0),
    .d0(out_d0),
    .q0(out_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_fu_169_p2))) begin
        first_2_reg_99 <= i_reg_277;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        first_2_reg_99 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_fu_169_p2))) begin
        first_reg_87 <= first_1_fu_214_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        first_reg_87 <= 32'd9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_21_fu_251_p1))) begin
        p_0_rec_i_reg_121 <= p_rec_i_reg_316;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_142_p2 == 1'd1))) begin
        p_0_rec_i_reg_121 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_fu_169_p2))) begin
        v_fu_34 <= v_1_fu_180_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v_fu_34 <= val_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_110 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_fu_169_p2))) begin
        x_reg_110 <= x_1_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        first_2_cast1_reg_267[3 : 0] <= first_2_cast1_fu_137_p1[3 : 0];
        i_reg_277 <= i_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_load_reg_321 <= out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_rec_i_reg_316 <= p_rec_i_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        powers10_load_cast_reg_292[29 : 0] <= powers10_load_cast_fu_162_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_142_p2 == 1'd1))) begin
        tmp_19_reg_287 <= tmp_19_fu_154_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_i_fu_241_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_i_fu_241_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_21_fu_251_p1))) begin
        debug_out_ap_vld = 1'b1;
    end else begin
        debug_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_address0 = sum_i_cast_fu_230_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_address0 = first_2_cast1_reg_267;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_address0 = 32'd10;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out_ce0 = 1'b1;
    end else begin
        out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_d0 = tmp_5_fu_190_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d0 = 8'd0;
    end else begin
        out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_142_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_fu_169_p2)))) begin
        out_we0 = 1'b1;
    end else begin
        out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        powers10_ce0 = 1'b1;
    end else begin
        powers10_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_142_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_fu_169_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_i_fu_241_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_21_fu_251_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign debug_out = out_load_reg_321;

assign exitcond_fu_142_p2 = ((first_2_reg_99 == 4'd10) ? 1'b1 : 1'b0);

assign first_1_fu_214_p3 = ((or_cond_fu_208_p2[0:0] === 1'b1) ? first_2_cast1_reg_267 : first_reg_87);

assign first_2_cast1_fu_137_p1 = first_2_reg_99;

assign i_fu_148_p2 = (first_2_reg_99 + 4'd1);

assign or_cond_fu_208_p2 = (tmp_6_fu_197_p2 & tmp_7_fu_203_p2);

assign p_rec_i_fu_235_p2 = (32'd1 + p_0_rec_i_reg_121);

assign powers10_address0 = first_2_cast1_fu_137_p1;

assign powers10_load_cast2_fu_158_p1 = $signed(powers10_q0);

assign powers10_load_cast_fu_162_p1 = $unsigned(powers10_load_cast2_fu_158_p1);

assign sum_i_cast_fu_230_p1 = sum_i_fu_225_p2;

assign sum_i_fu_225_p2 = (tmp_20_fu_221_p1 + tmp_19_reg_287);

assign tmp_19_fu_154_p1 = first_reg_87[4:0];

assign tmp_20_fu_221_p1 = p_0_rec_i_reg_121[4:0];

assign tmp_21_fu_251_p1 = debug_ready[0:0];

assign tmp_5_fu_190_p2 = (x_reg_110 | 8'd48);

assign tmp_6_fu_197_p2 = ((x_reg_110 != 8'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_203_p2 = (($signed(first_reg_87) > $signed(first_2_cast1_reg_267)) ? 1'b1 : 1'b0);

assign tmp_fu_169_p2 = ((v_fu_34 < powers10_load_cast_reg_292) ? 1'b1 : 1'b0);

assign tmp_i_fu_241_p2 = ((out_q0 == 8'd0) ? 1'b1 : 1'b0);

assign v_1_fu_180_p2 = (v_fu_34 - powers10_load_cast_reg_292);

assign x_1_fu_174_p2 = (x_reg_110 + 8'd1);

always @ (posedge ap_clk) begin
    first_2_cast1_reg_267[31:4] <= 28'b0000000000000000000000000000;
    powers10_load_cast_reg_292[31:30] <= 2'b00;
end

endmodule //xilly_decprint
