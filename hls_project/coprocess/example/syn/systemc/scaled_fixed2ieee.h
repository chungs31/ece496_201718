// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _scaled_fixed2ieee_HH_
#define _scaled_fixed2ieee_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct scaled_fixed2ieee : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<29> > in_V;
    sc_in< sc_lv<9> > prescale;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    scaled_fixed2ieee(sc_module_name name);
    SC_HAS_PROCESS(scaled_fixed2ieee);

    ~scaled_fixed2ieee();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > out_bits_0_V_fu_194_p5;
    sc_signal< sc_lv<32> > out_bits_0_V_reg_469;
    sc_signal< sc_lv<32> > p_Result_s_fu_218_p5;
    sc_signal< sc_lv<32> > p_Result_s_reg_474;
    sc_signal< sc_lv<2> > i_fu_236_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > c_1_1_fu_280_p3;
    sc_signal< sc_lv<1> > exitcond_fu_230_p2;
    sc_signal< sc_lv<32> > c_1_2_fu_288_p3;
    sc_signal< sc_lv<1> > tmp_24_fu_296_p3;
    sc_signal< sc_lv<1> > tmp_24_reg_497;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > i_1_fu_304_p2;
    sc_signal< sc_lv<2> > i_1_reg_501;
    sc_signal< sc_lv<32> > sh_assign_fu_314_p3;
    sc_signal< sc_lv<32> > sh_assign_reg_506;
    sc_signal< sc_lv<1> > isNeg_reg_513;
    sc_signal< sc_lv<32> > tmp_8_fu_330_p2;
    sc_signal< sc_lv<32> > tmp_8_reg_519;
    sc_signal< sc_lv<32> > shift_2_fu_336_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<29> > in_shift_V_fu_370_p3;
    sc_signal< sc_lv<9> > tmp_3_fu_382_p2;
    sc_signal< sc_lv<9> > tmp_3_reg_539;
    sc_signal< sc_lv<1> > tmp_2_fu_377_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_387_p2;
    sc_signal< sc_lv<1> > tmp_6_reg_544;
    sc_signal< sc_lv<32> > c_0_s_reg_88;
    sc_signal< sc_lv<32> > c_1_s_reg_100;
    sc_signal< sc_lv<2> > i1_reg_112;
    sc_signal< sc_lv<29> > in_shift_reg_123;
    sc_signal< sc_lv<32> > shift_reg_133;
    sc_signal< sc_lv<2> > i2_reg_145;
    sc_signal< sc_lv<29> > p_Val2_s_reg_156;
    sc_signal< sc_lv<32> > shift_1_reg_166;
    sc_signal< sc_lv<16> > p_Result_1_fu_176_p4;
    sc_signal< sc_lv<17> > tmp_fu_186_p3;
    sc_signal< sc_lv<13> > tmp_22_fu_206_p1;
    sc_signal< sc_lv<14> > tmp_5_fu_210_p3;
    sc_signal< sc_lv<1> > tmp_23_fu_242_p1;
    sc_signal< sc_lv<32> > tmp_4_fu_246_p4;
    sc_signal< sc_lv<32> > tmp_7_fu_255_p4;
    sc_signal< sc_lv<32> > p_Result_29_fu_264_p3;
    sc_signal< sc_lv<32> > c_0_fu_272_p3;
    sc_signal< sc_lv<1> > tmp_25_fu_310_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_346_p1;
    sc_signal< sc_lv<32> > sh_assign_1_fu_341_p3;
    sc_signal< sc_lv<32> > tmp_1_fu_356_p2;
    sc_signal< sc_lv<32> > tmp_s_fu_350_p2;
    sc_signal< sc_lv<29> > tmp_27_fu_362_p1;
    sc_signal< sc_lv<29> > tmp_28_fu_366_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > tmp_3_cast_fu_392_p1;
    sc_signal< sc_lv<32> > newexp_fu_395_p2;
    sc_signal< sc_lv<1> > tmp_30_fu_401_p3;
    sc_signal< sc_lv<1> > or_cond_fu_409_p2;
    sc_signal< sc_lv<23> > phitmp2_fu_418_p4;
    sc_signal< sc_lv<8> > tmp_31_fu_414_p1;
    sc_signal< sc_lv<8> > out_exp_V_fu_436_p3;
    sc_signal< sc_lv<23> > p_Val2_22_fu_428_p3;
    sc_signal< sc_lv<32> > p_Result_30_fu_444_p4;
    sc_signal< sc_lv<32> > result_write_assign_fu_454_p1;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<9> ap_const_lv9_7F;
    static const sc_lv<29> ap_const_lv29_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_c_0_fu_272_p3();
    void thread_c_1_1_fu_280_p3();
    void thread_c_1_2_fu_288_p3();
    void thread_exitcond_fu_230_p2();
    void thread_i_1_fu_304_p2();
    void thread_i_fu_236_p2();
    void thread_in_shift_V_fu_370_p3();
    void thread_newexp_fu_395_p2();
    void thread_or_cond_fu_409_p2();
    void thread_out_bits_0_V_fu_194_p5();
    void thread_out_exp_V_fu_436_p3();
    void thread_p_Result_1_fu_176_p4();
    void thread_p_Result_29_fu_264_p3();
    void thread_p_Result_30_fu_444_p4();
    void thread_p_Result_s_fu_218_p5();
    void thread_p_Val2_22_fu_428_p3();
    void thread_phitmp2_fu_418_p4();
    void thread_result_write_assign_fu_454_p1();
    void thread_sh_assign_1_fu_341_p3();
    void thread_sh_assign_fu_314_p3();
    void thread_shift_2_fu_336_p2();
    void thread_tmp_1_fu_356_p2();
    void thread_tmp_22_fu_206_p1();
    void thread_tmp_23_fu_242_p1();
    void thread_tmp_24_fu_296_p3();
    void thread_tmp_25_fu_310_p1();
    void thread_tmp_27_fu_362_p1();
    void thread_tmp_28_fu_366_p1();
    void thread_tmp_2_fu_377_p2();
    void thread_tmp_30_fu_401_p3();
    void thread_tmp_31_fu_414_p1();
    void thread_tmp_3_cast_fu_392_p1();
    void thread_tmp_3_fu_382_p2();
    void thread_tmp_4_fu_246_p4();
    void thread_tmp_5_fu_210_p3();
    void thread_tmp_6_fu_387_p2();
    void thread_tmp_7_fu_255_p4();
    void thread_tmp_8_fu_330_p2();
    void thread_tmp_9_fu_346_p1();
    void thread_tmp_fu_186_p3();
    void thread_tmp_s_fu_350_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
